#!/bin/ksh
# JCDAS_DUMP_POST
#   Job script for CDAS DUMP_POST processing
# 
# modification history
# 18 Apr 2014 - config'd for running under vertical structure (VS) layout
#----

# #########################################################
# SETUP CDAS DATA DUMP POST PROCESSING VARIABLES
#  LISTING AND FORMAT CONVERSION
# #########################################################

set -a
date -u

echo " Job script JCDAS_DUMP_POST - start of script" ; echo

# Report versions used
# --------------------
versions_list=' 
 obsproc_global_ver obsproc_dump_post_ver obsproc_shared_bufr_avgdata_ver
 obsproc_shared_bufr_remorest_ver obsproc_shared_bufr_dumplist_ver'

all_set=yes
for var in $versions_list ; do 
  eval version=\${$var}
  printf "%40s : " $var 
  if [ -n "$version" ] ; then echo $version
  else echo 'not set' ; all_set=no
  fi # -n version
done # for var
if [ .$all_set != .'yes' ] ; then 
  echo " *** FATAL ERROR: not all required version values set - exiting" ; exit
fi # all_set != yes


###################################################################
# Set DEBUG LEVEL - modifies info in execution trace prompt string
###################################################################
export DEBUG_LEVEL=${DEBUG_LEVEL=1}
case $DEBUG_LEVEL in
  1) export PS4='+ ${SECONDS}s + ' ;;       # add seconds (this is typical case)
  0) export PS4='+ ';;                      # don't include seconds (useful if
                                            #  want to diff output from 2 runs)
  2) export PS4='+ ${SECONDS}s:L$LINENO + ';;         # add script line #
  3) export PS4='+ ${SECONDS}s:${0##*/}:L$LINENO + ';;# add script name & line #
  *) echo "Unrecognized DEBUG_LEVEL.  Stay with current PS4 setting";;
esac


# Check that required variables are imported
# ------------------------------------------
echo ; echo " Job script JCDAS_DUMP_POST - running with:"
echo "      cyc = ${cyc:?' ...not set.  ###FATAL ERROR'}"
echo "    envir = ${envir:?' ...not set.  ###FATAL ERROR'}"
echo "      job = ${job:?' ...not set.  ###FATAL ERROR'}"
echo

set -x

##########################
# Specify NET and RUN Name
##########################
export NET=cdas
export RUN=cdas
export model=cdas

##############################
# Specify cycle and time-mark
##############################
export cycle=t${cyc}z
export tmmark=tm00

###############################
# Create new working directory
###############################
host=$(hostname -s)
if [[ ${USER} == nwprod ]]; then
  DATAROOT=/tmpnwprd
else
  DATAROOT=${DATAROOT:?"###FATAL ERROR \"DATAROOT\" is not set"}
fi
export pid=$$
export DATA=${DATA:-$DATAROOT/${job}.${host}.$pid}
rm -rf $DATA
mkdir -p $DATA
cd $DATA

######################################
# Set job log file for postmsg output
######################################
if [[ ${USER} == nwprod ]]; then
  if [[ ${envir} == prod ]]; then
    jlogfile=/com/logs/jlogfiles/jlogfile.${job}.$$
  else
    jlogfile=/com/logs/${envir}/jlogfile
  fi
else
  jlogfile=${jlogfile:-${DATA}/jlogfile}
fi

# Set Alert log file
# ------------------
export ALERTL=${ALERTL:-/com/logs/alertlog}

######################################
# Determine Job Output Name on System
######################################
export outid="LL$job"
[ $envir != prod ]  && export outid="LL${job}_${envir}"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"


################################################
# SENDCOM      - Copy files to /com directory
# SENDECF      - Flag Events on ECFLOW
# SENDDBN      - Alert output file to TOC
# SENDDBN_GB2  - Alert output GRIB2 file to TOC
################################################
if [[ ${USER} == nwprod ]]; then
  export SENDCOM=YES
  export SENDECF=YES
  export SENDSDM=${SENDSDM:-YES}
  if [[ ${envir} == prod ]]; then
    export SENDDBN=YES
    export SENDDBN_GB2=NO
    export SENDSDM=YES
  else
    export SENDDBN=NO
    export SENDDBN_GB2=NO
    export SENDSDM=NO
  fi
else  # developer
  export SENDCOM=${SENDCOM:-YES}
  export SENDECF=NO
  export SENDDBN=NO
  export SENDDBN_GB2=NO
  export SENDSDM=NO
fi

##########################
# Specify Execution Areas
##########################

# -------------------------------
# Paths for obsproc_network items
# -------------------------------
#jaw export HOMEobsproc_network=${HOMEobsproc_network:\
#jaw -/nw${envir}/obsproc_global.${obsproc_global_ver:?\
#jaw "###FATAL ERROR \"obsproc_global_ver\" is not set"}}     # is this var needed? db jaw


# Paths for obsproc_dump_post items
# ---------------------------------
export HOMEobsproc_dump_post=${HOMEobsproc_dump_post:\
-/nw${envir}/obsproc_dump_post.${obsproc_dump_post_ver:?\
"###FATAL ERROR \"obsproc_dump_post_ver\" is not set"}}     # is this var needed? db jaw
export SCRIPTSobsproc_dump_post=${SCRIPTSobsproc_dump_post:-$HOMEobsproc_dump_post/scripts}

export USHobsproc_dump_post=${USHobsproc_dump_post:-$HOMEobsproc_dump_post/ush}

export EXECobsproc_dump_post=${EXECobsproc_dump_post:-$HOMEobsproc_dump_post/exec}


# Paths for obsproc_shared_bufr_dumplist items
# --------------------------------------------
export HOMEobsproc_shared_bufr_dumplist=${HOMEobsproc_shared_bufr_dumplist:\
-/nw${envir}/obsproc_shared/bufr_dumplist.${obsproc_shared_bufr_dumplist_ver:?\
"###FATAL ERROR \"obsproc_shared_bufr_dumplist_ver\" is not set"}}

export FIXobsproc_shared_bufr_dumplist=${FIXobsproc_shared_bufr_dumplist:\
-$HOMEobsproc_shared_bufr_dumplist/fix}


# Settings for obsproc_bufr_datacount
# -----------------------------------
HOMEarch=${HOMEarch:-/com/arch/${envir}}
export AVGDarch_IN=${AVGDarch_IN:-$HOMEarch/avgdata}


# Settings for obsproc_shared_bufr_remorest
# -----------------------------------------
export HOMEobsproc_shared_bufr_remorest=${HOMEobsproc_shared_bufr_remorest:\
-/nw${envir}/obsproc_shared/bufr_remorest.${obsproc_shared_bufr_remorest_ver:?\
"###FATAL ERROR \"obsproc_shared_bufr_remorest_ver\" is not set"}}

export USHobsproc_shared_bufr_remorest=${USHobsproc_shared_bufr_remorest:\
-$HOMEobsproc_shared_bufr_remorest/ush}

export EXECobsproc_shared_bufr_remorest=${EXECobsproc_shared_bufr_remorest:\
-$HOMEobsproc_shared_bufr_remorest/exec}


# Settings for obsproc_shared_bufr_avgdata
# ----------------------------------------
export AVGDarch_OUT=${AVGDarch_OUT:-$HOMEarch/avgdata}


# ---------------------------
# Paths for non-obsproc items
# ---------------------------


##########################
# Set up the UTILITY paths
##########################
export utilscript=${utilscript:-/nwprod/util/ush}
export utilparm=${utilparm:-/nwprod/util/parm}
export utilexec=${utilexec:-/nwprod/util/exec}

################################################################
# Run setup to initialize working directory and utility scripts
################################################################
if [[ ${USER} == nwprod ]]; then
  sh $utilscript/setup.sh
else
  sh ${SETUP:-/nwprod/util/ush}/setup.sh
fi


##############################
# Run setpdy and initialize PDY variables
##############################
if test "$cyc" = "06"
then

# With a very late cutoff, it is possible for the 06Z cycle
# to move into the next day if production is running late -
# to ensure that the YYYYMMDD are correct, use the /com/date/t12z
# file for our PDY

   export cycle=t12z
   ksh $utilscript/setpdy.sh
   . $DATA/PDY
   export cycle=t06z
   ksh $utilscript/setpdy.sh
   . $DATA/PDY

elif test "$cyc" = "18"
then

# With a very late cutoff, it is possible for the 18Z cycle
# to move into the next day if production is running late -
# to ensure that the YYYYMMDD are correct, use the /com/date/t00z
# file to make PDY then backdate this PDY by 24-hours to get our PDY

   export cycle=t00z
   ksh $utilscript/setpdy.sh
   . $DATA/PDY
   PDY=$PDYm1
   ksh $utilscript/setpdy.sh
   . $DATA/PDY
   export cycle=t18z
   ksh $utilscript/setpdy.sh
   . $DATA/PDY

else

# At 00 and 12Z, there should never be a problem

   ksh $utilscript/setpdy.sh
   . $DATA/PDY

fi

#########################
# Define COM directories
#########################
if [ "$LSB_UNIXGROUP_INT" = 'prod' ]; then
  export COMIN=/com/${NET}/${envir}/${RUN}.${PDY}
  export COMOUT=/com/${NET}/${envir}/${RUN}.${PDY}
  mkdir -m 775 -p $COMOUT
else
  export COMIN_ROOT=${COMIN_ROOT:-/com}
  export COMIN=${COMIN:-${COMIN_ROOT}/${NET}/${envir}/${RUN}.${PDY}}

# COMOUT_ROOT for developers defaults to unique $DATA/com directory as root to
#  prevent job from writing into a non-unique directory (e.g.,
#  /ptmp[p][d]1/$USER/com) that might already have a dump status file in it
#  from a previous checkout run (this could mess up some logic downstream)
# ----------------------------------------------------------------------------
  export COMOUT_ROOT=${COMOUT_ROOT:-${DATA}/com}
  export COMOUT=${COMOUT:-${COMOUT_ROOT}/${NET}/${envir}/${RUN}.${PDY}}
  mkdir -m 755 -p $COMOUT
fi


########################################################
# Specify variables specific to this execution of script
########################################################

export PROCESS_DATACOUNTS=NO # Never processed in CDAS run
export PROCESS_REMOREST=YES
export PROCESS_UNBLKBUFR=YES
export PROCESS_LISTERS=YES
export PROCESS_AVGTABLES=NO  # Never processed in CDAS run

set +x ; echo ; echo " --- begin list of environment variable settings"
env
echo " --- end of list of environment variable settings" ; echo ; set -x

####################
# execute the script
####################
ksh $SCRIPTSobsproc_dump_post/exdump_post.sh.ecf
rc=$?
set +x ; echo ; echo " back fr model script exdump_post.sh.ecf - rc='$rc'" ; set -x


CLEAN=${CLEAN:-YES}
if [ $CLEAN = YES ]; then
   cd $DATAROOT
   rm -rf $DATA
fi

echo ; echo " normal end of JCDAS_DUMP_POST script"
date -u

exit
#---end of JCDAS_DUMP_POST

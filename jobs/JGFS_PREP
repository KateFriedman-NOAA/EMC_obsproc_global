set -xa
date -u

################################
# Print out version information
################################
set +x
echo
echo "####################################################################"
echo
echo "Current OBSPROC_GLOBAL version is ${obsproc_global_ver:-not set}"
echo "OBSPROC_PREP version used by this job is ${obsproc_prep_ver:-not set}"
echo
echo
      module list
echo
echo "####################################################################"
echo
set -x

###################################################################
# Set DEBUG LEVEL - modifies info in execution trace prompt string
###################################################################
export DEBUG_LEVEL=${DEBUG_LEVEL=1}
case $DEBUG_LEVEL in
  1) export PS4='+ ${SECONDS}s + ' ;;       # add seconds (this is typical case)
  0) export PS4='+ ';;                      # don't include seconds (useful if
                                            #  want to diff output from 2 runs)
  2) export PS4='+ ${SECONDS}s:L$LINENO + ';;         # add script line #
  3) export PS4='+ ${SECONDS}s:${0##*/}:L$LINENO + ';;# add script name & line #
  4) export PS4='+ ${0##*/}:L$LINENO + ';;  # script name & line (no seconds)
  *) echo "Unrecognized DEBUG_LEVEL.  Stay with current PS4 setting";;
esac

########################################
# Check that required variables are set
########################################
set +x
echo
echo cyc is ${cyc:?"###FATAL ERROR \"cyc\" is not set"}
echo envir is ${envir:?"###FATAL ERROR \"envir\" is not set"}
echo job is ${job:?"###FATAL ERROR \"job\" is not set"}
echo DATAROOT is ${DATAROOT:?"###FATAL ERROR \"DATAROOT\" is not set"}
echo
set -x

##################################
# Specify NET, RUN and model Name
##################################
export NET=${NET:-gfs}
export RUN=${RUN:-gfs}
export model=${model:-gfs}  # Used in subscripts for file names

##############################
# Specify cycle and time-mark
##############################
export cycle=t${cyc}z
export tmmark=tm00

###############################
# Create new working directory
###############################
host=$(hostname -s)
export DATA=${DATA:-$DATAROOT/${job}.${host}.$$}
rm -rf $DATA
mkdir -p $DATA
cd $DATA

######################################
# Set job log file for postmsg output
######################################
jlogfile=${jlogfile:-${DATA}/jlogfile}

######################################
# Determine Job Output Name on System
######################################
export pid=$$
export outid="LL$job"
[ $envir != prod ]  && export outid="LL${job}_${envir}"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"

################################################
# SENDCOM      - Copy files to $COMOUT directory
# SENDECF      - Flag Events on ECFLOW
# SENDDBN      - Alert output file to TOC
################################################
export SENDCOM=${SENDCOM:-YES}
export SENDECF=${SENDECF:-YES}
export SENDDBN=${SENDDBN:-YES}

##########################
# Specify Execution Areas
##########################
NWROOTp1=${NWROOTp1:-/nwprod}  # transitional setting

# -------------------------------
# Paths for obsproc_network items
# -------------------------------
export HOMEobsproc_network=${HOMEobsproc_network:\
-${NWROOT:?}/obsproc_global.${obsproc_global_ver:?\
"###FATAL ERROR \"obsproc_global_ver\" is not set"}}

export SCRIPTSobsproc_global=${SCRIPTSobsproc_global:\
-$HOMEobsproc_network/scripts}

export FIXobsproc_global=${FIXobsproc_global:-$HOMEobsproc_network/fix}

# ----------------------------
# Paths for obsproc_prep items
# ----------------------------
export HOMEobsproc_prep=${HOMEobsproc_prep:\
-${NWROOTp1:?}/obsproc_prep.${obsproc_prep_ver:?\
"###FATAL ERROR \"obsproc_prep_ver\" is not set"}}

export USHobsproc_prep=${USHobsproc_prep:-$HOMEobsproc_prep/ush}

# directory path to data prep script executed in model script
# -----------------------------------------------------------
export ushscript_prep=${ushscript_prep:-$USHobsproc_prep}

# ---------------------------------------------------------
# Paths for combined obsproc_network and obsproc_prep items
# ---------------------------------------------------------

# directory paths to overall PREP processing executed in
#  prepobs_makeprepbufr.sh and its various child scripts
#  (other than prepobs_syndata.sh, see below)
# ------------------------------------------------------
export EXECPREP=${EXECPREP:-${HOMEobsproc_prep}/exec}
export FIXPREP=${FIXPREP:-${HOMEobsproc_prep}/fix}
export PARMPREP=${PARMPREP:-${HOMEobsproc_network}/parm}

# directory paths to SYNDATA processing executed in prepobs_syndata.sh
# --------------------------------------------------------------------
export EXECSYND=${EXECSYND:-${HOMEobsproc_prep}/exec}
export FIXSYND=${FIXSYND:-${HOMEobsproc_prep}/fix}
export PARMSYND=${PARMSYND:-${HOMEobsproc_network}/parm}

# ---------------------------
# Paths for non-obsproc items
# ---------------------------

# DICTPREP is directory path to metar.tbl dictionary used in
#  prepobs_prepacqc.sh if PREPOBS_PREPACPF is executed
# ----------------------------------------------------------
export DICTPREP=${DICTPREP:-/nwprod/decoders/decod_shared/dictionaries}

###########################
# Set up the UTILITY paths
###########################
export utilscript=${utilscript:-/nwprod/util/ush}    # temporary
export utilexec=${utilexec:-/nwprod/util/exec}       # temporary

################################################################
# Run setup to initialize working directory and utility scripts
################################################################
sh $utilscript/setup.sh                              # temporary

##########################################
# Run setpdy and initialize PDY variables
##########################################
set +x; echo -e "\n---> path to setpdy.sh below is: `which setpdy.sh`"; set -x
setpdy.sh
. $DATA/PDY

#########################
# Define COM directories
#########################
export COMIN_ROOT=${COMIN_ROOT:-${COMROOT:-""}}
if [[ "$RUN_ENVIR" == nco ]]; then
  export COMIN=${COMIN_ROOT:?}/${NET}/${envir}/${model}.${PDY}
  export COMOUT=${COMROOT:?}/${NET}/${envir}/${model}.${PDY}
  mkdir -m 775 -p $COMOUT
else
  export COMIN=${COMIN:-${COMIN_ROOT:?}/${NET}/${envir}/${model}.${PDY}}

# COMOUT_ROOT for developers defaults to unique $DATA/com directory as root to
#  prevent job from writing into a non-unique directory that might already have
#  output in it from a previous checkout run for the same cycle
# -----------------------------------------------------------------------------
  export COMOUT_ROOT=${COMOUT_ROOT:-${DATA}/com}
  export COMOUT=${COMOUT:-${COMOUT_ROOT}/${NET}/${envir}/${model}.${PDY}}
  mkdir -m 755 -p $COMOUT
fi
export GETGES_COM=${COMROOT:-/com}

##########################################
# SETUP GFS PREPBUFR PROCESSING VARIABLES
##########################################

#########################################################
# Specify variables specific to this execution of script
#########################################################

#  Set POE *or* BACK to YES in order to run this job in a parallel environment

export POE=${POE:-YES}
##export BACK=YES  # set BACK to YES for an alternate method of running this
                   #  job in a parallel environment (in this case POE must be
                   #  NO)

#  NPROCS indicates the number of POE tasks to use
#   (Applies only when POE=YES and PREPDATA=YES)

export NPROCS=${NPROCS=$(($(echo $LSB_HOSTS|wc -w)+0))}

#  NSPLIT indicates the number of parts into which the PREPDATA
#         processing will will be split in order to run in parallel
#         for computational efficiency (either under poe tasks when
#         POE=YES or in background threads when BACK=YES)
#   (Applies only when either POE=YES or BACK=YES, and PREPDATA=YES)
#   A value less than or equal to NPROCS is recommended for POE, 
#   and may be required depending on poe launcher used.
#   Consider the size of the backgrounds fields if using threads. 
#   (At T1534 resolution, only four fit on a WCOSS compute node).

export NSPLIT=${NSPLIT:-3}

#  BUFRLIST indicates the list of BUFR data dump file names to process

export BUFRLIST=${BUFRLIST:-"adpupa proflr aircar aircft satwnd adpsfc \
 sfcshp vadwnd wdsatr ascatw rassda gpsipw"}

export errPREPDATA_limit=4 # allow program PREPOBS_PREPDATA to continue at all
                           # center hour (cycle) times if foreground exit
                           # status is 4 (i.e., when either either "ADPUPA" or
                           # "ADPSFC" dump is empty)

# VARIABLES THAT CONTROL PROCESSING OF INDIVIDUAL PROGRAMS
# --------------------------------------------------------

#  -- These can individually be switched to NO without affecting the
#      success of other programs and the success of the complete job
#      (all should normally be set to YES unless otherwise specified;
#       if job fails in one of these programs, set offending program
#       to NO and resubmit to "work-around" problem)

export SYNDATA=${SYNDATA:-YES}   # Execute program SYNDAT_SYNDATA   if YES

export PREPACQC=${PREPACQC:-YES} # Execute PREPACQC script processing if YES
   export PROCESS_ACQC=${PROCESS_ACQC:-YES} # Execute program PREPOBS_PREPACQC
                                            #  if YES
   export PROCESS_ACPF=${PROCESS_ACPF:-NO}  # Execute program PREPOBS_PREPACPF
                                            #  if YES

export PROFCQC=${PROFCQC:-YES}   # Execute program PREPOBS_PROFCQC  if YES

export CQCVAD=${CQCVAD:-YES}     # Execute program PREPOBS_CQCVAD   if YES

export CQCBUFR=${CQCBUFR:-YES}   # Execute program PREPOBS_CQCBUFR  if YES

export OIQCBUFR=${OIQCBUFR:-NO} # Execute program PREPOBS_OIQCBUFR if YES


#  -- If any of these are switched to NO it will affect the success of
#      other programs and the success of the complete job
#      (these are set-up only for CHECKOUT runs - they should always
#       be set to YES for operational runs)

export PREPDATA=${PREPDATA:-YES}  
                      # Execute programs PREPOBS_MPCOPYBUFR, PREPOBS_PREPDATA,
                      # PREPOBS_LISTHEADERS and PREPOBS_MONOPREPBUFR if YES

export GETGUESS=${GETGUESS:-YES}
                      # Encode first guess (background) values interpolated to
                      # observation locations in the PREPBUFR file for use by
                      # the q.c. programs.  This guess is always from a global
                      # sigma guess file valid at the center PREPBUFR
                      # processing date/time.

export DO_QC=${DO_QC:-YES}
                      # IF NO, programs PREPOBS_PREPACQC, PREPOBS_PREPACPF,
                      # PREPOBS_PROFCQC, PREPOBS_CQCVAD, PREPOBS_CQCBUFR and
                      # PREPOBS_OIQCBUFR will NEVER execute regardless of
                      # switches above -
                      # should be set to NO only as a last resort!!!

env

#####################
# Execute the script
#####################
$SCRIPTSobsproc_global/exglobal_makeprepbufr.sh.ecf
eval err_${model}_prep=$?

echo "`hostname`  --  `date -u`" > $COMOUT/where_${cycle}_${RUN}_prep_ran

> $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run
[ -n "$obsproc_global_ver" ]  &&  \
 echo "Current OBSPROC_GLOBAL version is $obsproc_global_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run
[ -n "$obsproc_prep_ver" ]  &&  \
 echo "OBSPROC_PREP version used by this job is $obsproc_prep_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run

if [ "$KEEPDATA" != YES ]; then
   cd $DATAROOT
   rm -rf $DATA
fi
date -u

exit

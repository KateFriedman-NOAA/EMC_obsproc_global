#!/bin/ksh

set -xa     
date

if [ -n "$obsproc_prep_ver" ]; then
   set +x
   echo
   echo "Current OBSPROC_GLOBAL version is $obsproc_global_ver"
   echo "Current OBSPROC_PREP version is $obsproc_prep_ver"
   echo
   set -x
fi

###################################################################
# Set DEBUG LEVEL - modifies info in execution trace prompt string
###################################################################
export DEBUG_LEVEL=${DEBUG_LEVEL=1}
case $DEBUG_LEVEL in
  1) export PS4='+ ${SECONDS}s +' ;;        # add seconds (this is typical case)
  0) export PS4='+ ';;                      # don't include seconds (useful if
                                            #  want to diff output from 2 runs)
  2) export PS4='+ ${SECONDS}s:L$LINENO + ';;         # add script line #
  3) export PS4='+ ${SECONDS}s:${0##*/}:L$LINENO + ';;# add script name & line #
  *) echo "Unrecognized DEBUG_LEVEL.  Stay with current PS4 setting";; 
esac

########################################
# Check that required variables are set
########################################
set +x
echo
echo cyc is ${cyc:?"###FATAL ERROR \"cyc\" is not set"}
echo envir is ${envir:?"###FATAL ERROR \"envir\" is not set"} 
echo job is ${job:?"###FATAL ERROR \"job\" is not set"} 
echo
echo
set -x

##################################
# Specify NET, RUN and model Name
##################################
export NET=${NET:-gfs}
export RUN=${RUN:-gfs}
export model=${model:-gfs}

###############################
# Create new working directory
###############################
host=$(hostname -s)
if [[ ${USER} == nwprod ]]; then
  DATAROOT=/tmpnwprd
else
  DATAROOT=${DATAROOT:-/stmp/${USER}}
fi
export DATA=${DATA:-$DATAROOT/${job}.${host}.$$}
rm -rf $DATA
mkdir -p $DATA
cd $DATA

######################################
# Set job log file for postmsg output
######################################
if [[ ${USER} == nwprod ]]; then
  if [[ ${envir} == prod ]]; then
    jlogfile=/com/logs/jlogfiles/jlogfile.${job}.$$
  else
    jlogfile=/com/logs/${envir}/jlogfile
  fi
else
  jlogfile=${jlogfile:-${DATA}/jlogfile}
fi

######################################
# Determine Job Output Name on System
######################################
export pid=$$
export outid="LL$job"
[ $envir != prod ]  && export outid="LL${job}_${envir}"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"


if [ $envir = "prod" ]
then
   export SENDDBN=${SENDDBN:-YES}
   export jlogfile=${jlogfile:-/com/logs/jlogfiles/jlogfile.${job}.$$}
else
   export SENDDBN=${SENDDBN:-NO}
   export jlogfile=${jlogfile:-/com/logs/${envir}/jlogfile}
   export COM=${COM:-/com/${NET}/${envir}}
   export COM_IN=${COM_IN:-/com/${NET}/${envir}}
   export COM_OUT=${COM_OUT:-/com/${NET}/${envir}}
   export COMIN=${COMIN:-/com/${NET}/${envir}/${RUN}.${PDY}}
   export COMOUT=${COMOUT:-/com/${NET}/${envir}/${RUN}.${PDY}}
   export PARMPREP=/nwtest/parm
   export envir_getges=prod
   export USHGETGES=/nwprod/util/ush
   export ushscript_prep=/nw${envir}/ush
                                      # path to observational data prep scripts
fi

#####################################
# Run config to get input parameters
#####################################
if [ "$RUN_ENVIR" = dev ]      ### For Developers to specify the necessary
                               ### parameters to overwrite the default settings
then
  . /meso/save/${LOGNAME}/.....
fi

##########################################
# SETUP GFS PREPBUFR PROCESSING VARIABLES
##########################################

###################
# File To Log Msgs
###################
export jlogfile=${jlogfile:-/com/logs/jlogfiles/jlogfile.${job}.${pid}}

export cycle=t${cyc}z
export tmmark=tm00

######################################
# Determine Job Output Name on System
######################################
export outid="LL$job"
[ $envir != prod ]  && export outid="LL${job}_${envir}"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"

##################################################################
# SENDCOM=YES   - Copy output files to /com directory
# SENDECF=YES   - Flag Events on ECFLOW
# SENDDBN=YES   - Alert output file to TOC, set to NO for testing
##################################################################
export SENDCOM=${SENDCOM:-YES}
export SENDECF=${SENDECF:-YES}
export SENDDBN=${SENDDBN:-YES}       # need to set to NO for testing only

##########################
# Specify Execution Areas
##########################
export HOMEobsproc_network=${HOMEobsproc_network:-/nw${envir}/obsproc_global.${obsproc_global_ver}}
export FIXobsproc_global=${FIXobsproc_global:-$HOMEobsproc_network/fix}
export SCRIPTSobsproc_global=${SCRIPTSobsproc_global:-$HOMEobsproc_network/scripts}

export HOMEobsproc_prep=${HOMEobsproc_prep:-/nw${envir}/obsproc_prep.${obsproc_prep_ver}}

export EXECPREP=${EXECPREP:-${HOMEobsproc_prep}/exec}
export FIXPREP=${FIXPREP:-${HOMEobsproc_prep}/fix}
export PARMPREP=${PARMPREP:-${HOMEobsproc_network}/parm}
export DICTPREP=${DICTPREP:-/nwprod/dictionaries}

export HOMESYND=${HOMESYND:-$HOMEobsproc_prep}
export EXECSYND=${EXECSYND:-${HOMESYND}/exec}
export FIXSYND=${FIXSYND:-${HOMESYND}/fix}
export PARMSYND=${PARMSYND:-${HOMEobsproc_network}/parm}

export HOMEUTIL=${HOMEUTIL:-/nwprod/util}
export EXECUTIL=${EXECUTIL:-${HOMEUTIL}/exec}

############################
# Below for path to prepobs scripts in model scripts
export ushscript_prep=${ushscript_prep:-$HOMEobsproc_prep/ush}

#######################
# Set up the UTILITIES
#######################
export utilscript=${utilscript:-/nwprod/util/ush}
export utilparm=${utilparm:-/nwprod/util/parm}
export utilexec=${utilexec:-/nwprod/util/exec}

################################################################
# Run setup to initialize working directory and utility scripts
################################################################
sh $utilscript/setup.sh
cp /usr/bin/time $DATA/time
chmod 755 $DATA/time

##########################################
# Run setpdy and initialize PDY variables
##########################################
sh $utilscript/setpdy.sh
. $DATA/PDY

#########################
# Define COM directories
#########################
export COM_IN_ROOT=${COM_IN_ROOT:-/com}
export COM_IN=${COM_IN:-${COM_IN_ROOT}/${NET}/${envir}}
export COM_OUT_ROOT=${COM_OUT_ROOT:-/com}
export COM_OUT=${COM_OUT:-${COM_OUT_ROOT}/${NET}/${envir}}

export COM=${COM:-${COM_IN}}
export COMIN=${COMIN:-${COM_IN}/${RUN}.${PDY}}
export COMOUT=${COMOUT:-${COM_OUT}/${RUN}.${PDY}}

mkdir -m 775 -p $COMOUT

#########################################################
# Specify variables specific to this execution of script
#########################################################

#  Set both POE to YES in order to run this job in a parallel environment

export POE=YES
##export BACK=YES  # set BACK to YES for an alternate method of running this
                   #  job in a parallel environment (in this case POE must be
                   #  NO)

#  NPROCS indicates the number of POE tasks to use
#   (Applies only when POE=YES and PREPDATA=YES)

#####export NPROCS=$(($(echo $LOADL_PROCESSOR_LIST|wc -w)+0)) # applies to CCS
export NPROCS=12 # on WCOSS this is currently hardwired to 12

#  NSPLIT indicates the number of parts into which the PREPDATA
#         processing will will be split in order to run in parallel
#         for computational efficiency (either under poe tasks when
#         POE=YES or in background threads when BACK=YES)
#   (Applies only when either POE=YES or BACK=YES, and PREPDATA=YES)
#   (if POE=YES, must be .le. $NPROCS)

#####export NSPLIT=$NPROCS  # applies to CCS
export NSPLIT=12

#  BUFRLIST indicates the list of BUFR data dump file names to process

export BUFRLIST=${BUFRLIST:-"adpupa proflr aircar aircft satwnd adpsfc \
 sfcshp vadwnd wdsatr ascatw rassda gpsipw"}

# VARIABLES THAT CONTROL PROCESSING OF INDIVIDUAL PROGRAMS
# --------------------------------------------------------

#  -- These can individually be switched to NO without affecting the
#      success of other programs and the success of the complete job
#      (all should normally be set to YES unless otherwise specified;
#       if job fails in one of these programs, set offending program
#       to NO and resubmit to "work-around" problem)

export SYNDATA=${SYNDATA:-YES}   # Execute program SYNDAT_SYNDATA   if YES

export PREPACQC=${PREPACQC:-YES} # Execute PREPACQC script processing if YES
   export PROCESS_ACQC=${PROCESS_ACQC:-YES} # Execute program PREPOBS_PREPACQC
                                            #  if YES
   export PROCESS_ACPF=${PROCESS_ACPF:-NO}  # Execute program PREPOBS_PREPACPF
                                            #  if YES
                                            #  SHOULD ALWAYS BE SET TO "NO"
                                            #   (profiles are not generated in
                                            #    GFS)

export PROFCQC=${PROFCQC:-YES}   # Execute program PREPOBS_PROFCQC  if YES

export CQCVAD=${CQCVAD:-YES}     # Execute program PREPOBS_CQCVAD   if YES

export CQCBUFR=${CQCBUFR:-YES}   # Execute program PREPOBS_CQCBUFR  if YES

export OIQCBUFR=${OIQCBUFR:-YES} # Execute program PREPOBS_OIQCBUFR if YES


#  -- If any of these are switched to NO it will affect the success of
#      other programs and the success of the complete job
#      (these are set-up only for CHECKOUT runs - they should always
#       be set to YES for operational runs)

export PREPDATA=${PREPDATA:-YES}  
                      # Execute programs PREPOBS_MPCOPYBUFR, PREPOBS_PREPDATA,
                      # PREPOBS_LISTHEADERS and PREPOBS_MONOPREPBUFR if YES

export GETGUESS=${GETGUESS:-YES}
                      # Encode first guess (background) values interpolated to
                      # observation locations in the PREPBUFR file for use by
                      # the q.c. programs.  This guess is always from a global
                      # sigma guess file valid at the center PREPBUFR
                      # processing date/time.

export DO_QC=${DO_QC:-YES}
                      # IF NO, programs PREPOBS_PREPACQC, PREPOBS_PREPACPF,
                      # PREPOBS_PROFCQC, PREPOBS_CQCVAD, PREPOBS_CQCBUFR and
                      # PREPOBS_OIQCBUFR will NEVER execute regardless of
                      # switches above -
                      # should be set to NO only as a last resort!!!

env

#####################
# Execute the script
#####################
$SCRIPTSobsproc_global/exglobal_makeprepbufr.sh.ecf
eval err_${model}_dump=$?

echo "`hostname`  --  `date`" > $COMOUT/where_${cycle}_${RUN}_dump_ran

if [ "${CLEANUP:-YES}" = YES ]; then
  cd $DATAROOT
  rm -rf $DATA
fi

date
#ecflow_client --complete


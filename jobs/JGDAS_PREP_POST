set -xa
date -u

##################################
# Load modules needed by this job
##################################
module load util_shared/v1.0.4 # (prepended path to util ush script
                                # month_name.sh in ush script gdas_summary.sh)

################################
# Print out version information
################################
set +x
echo
echo "####################################################################"
echo
echo "Current OBSPROC_GLOBAL version is ${obsproc_global_ver:-not set}"
echo "OBSPROC_PREP_POST version used by this job is" \
       "${obsproc_prep_post_ver:-not set}"
echo "OBSPROC_SHARED_BUFR_REMOREST version used by this job is" \
       "${obsproc_shared_bufr_remorest_ver:-not set}"
echo
echo
      module list
echo
echo "####################################################################"
echo
set -x

###################################################################
# Set DEBUG LEVEL - modifies info in execution trace prompt string
###################################################################
export DEBUG_LEVEL=${DEBUG_LEVEL=1}
case $DEBUG_LEVEL in
  1) export PS4='+ ${SECONDS}s + ' ;;       # add seconds (this is typical case)
  0) export PS4='+ ';;                      # don't include seconds (useful if
                                            #  want to diff output from 2 runs)
  2) export PS4='+ ${SECONDS}s:L$LINENO + ';;         # add script line #
  3) export PS4='+ ${SECONDS}s:${0##*/}:L$LINENO + ';;# add script name & line #
  4) export PS4='+ ${0##*/}:L$LINENO + ';;  # script name & line (no seconds)
  *) echo "Unrecognized DEBUG_LEVEL.  Stay with current PS4 setting";;
esac

########################################
# Check that required variables are set
########################################
set +x
echo
echo cyc is ${cyc:?"###FATAL ERROR \"cyc\" is not set"}
echo envir is ${envir:?"###FATAL ERROR \"envir\" is not set"}
echo job is ${job:?"###FATAL ERROR \"job\" is not set"}
echo DATAROOT is ${DATAROOT:?"###FATAL ERROR \"DATAROOT\" is not set"}
echo
set -x

##################################
# Specify NET, RUN and model Name
##################################
export NET=${NET:-gfs}
export RUN=${RUN:-gdas1}
export model=${model:-gdas}  # Used in subscripts for file names

##############################
# Specify cycle and time-mark
##############################
export cycle=t${cyc}z
export tmmark=tm00

###############################
# Create new working directory
###############################
host=$(hostname -s)
export DATA=${DATA:-$DATAROOT/${job}.${host}.$$}
rm -rf $DATA
mkdir -p $DATA
cd $DATA

######################################
# Set job log file for postmsg output
######################################
jlogfile=${jlogfile:-${DATA}/jlogfile}

######################################
# Determine Job Output Name on System
######################################
export pid=$$
export outid="LL$job"
[ $envir != prod ]  && export outid="LL${job}_${envir}"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"

#################################################
# SENDCOM      - Copy files to $COMOUT directory
# SENDECF      - Flag Events on ECFLOW
# SENDDBN      - Alert output file to TOC
# SENDWEB      - Post content to WWW server
#################################################
export SENDCOM=${SENDCOM:-YES}
export SENDECF=${SENDECF:-YES}
export SENDDBN=${SENDDBN:-YES}
export SENDWEB=${SENDWEB:-YES}

######################################################
# Phase 1 --> Phase 2 --> Cray  Transitional Settings
######################################################
NWROOTp1=${NWROOTp1:-/nwprod}
NWROOTp2=${NWROOTp2:-/nwprod2}

##########################
# Specify Execution Areas
##########################

# -------------------------------
# Paths for obsproc_network items
# -------------------------------
export HOMEobsproc_network=${HOMEobsproc_network:\
-${NWROOT:?}/obsproc_global.${obsproc_global_ver:?\
"###FATAL ERROR \"obsproc_global_ver\" is not set"}}

# ---------------------------------
# Paths for obsproc_prep_post items
# ---------------------------------
export HOMEobsproc_prep_post=${HOMEobsproc_prep_post:\
-${NWROOTp2:?}/obsproc_prep_post.${obsproc_prep_post_ver:?\
"###FATAL ERROR \"obsproc_prep_post_ver\" is not set"}}

export SCRIPTSobsproc_prep_post=${SCRIPTSobsproc_prep_post:\
-$HOMEobsproc_prep_post/scripts}

export USHobsproc_prep_post=${USHobsproc_prep_post:\
-$HOMEobsproc_prep_post/ush}

export FIXobsproc_prep_post=${FIXobsproc_prep_post:\
-$HOMEobsproc_prep_post/fix}

export EXECobsproc_prep_post=${EXECobsproc_prep_post:\
-$HOMEobsproc_prep_post/exec}

# --------------------------------------------
# Paths for obsproc_shared_bufr_remorest items
# --------------------------------------------
export HOMEobsproc_shared_bufr_remorest=${HOMEobsproc_shared_bufr_remorest:\
-${NWROOTp1:?}/obsproc_shared/bufr_remorest.${obsproc_shared_bufr_remorest_ver:?\
"###FATAL ERROR \"obsproc_shared_bufr_remorest_ver\" is not set"}}

export EXECobsproc_shared_bufr_remorest=${EXECobsproc_shared_bufr_remorest:\
-$HOMEobsproc_shared_bufr_remorest/exec}

export USHobsproc_shared_bufr_remorest=${USHobsproc_shared_bufr_remorest:\
-$HOMEobsproc_shared_bufr_remorest/ush}

###########################
# Set up the UTILITY paths
###########################
export utilscript=${utilscript:-/nwprod/util/ush}    # temporary
export utilexec=${utilexec:-/nwprod/util/exec}       # temporary, used by timetwins

################################################################
# Run setup to initialize working directory and utility scripts
################################################################
sh $utilscript/setup.sh                              # temporary

##########################################
# Run setpdy and initialize PDY variables
##########################################
set +x; echo -e "\n---> path to setpdy.sh below is: `which setpdy.sh`"; set -x
setpdy.sh
. $DATA/PDY

#########################
# Define COM directories
#########################
export COMIN_ROOT=${COMIN_ROOT:-${COMROOT:-""}}

if [[ "$RUN_ENVIR" == nco ]]; then
  export COMIN=${COMIN_ROOT:?}/${NET}/${envir}/${model}.${PDY}
  export COMOUT=${COMROOT:?}/${NET}/${envir}/${model}.${PDY}
  mkdir -m 775 -p $COMOUT
else
  export COMIN=${COMIN:-${COMIN_ROOT:?}/${NET}/${envir}/${model}.${PDY}}

# COMOUT_ROOT for developers defaults to unique $DATA/com directory as root to
#  prevent job from writing into a non-unique directory that might already have
#  output in it from a previous checkout run for the same cycle
# -----------------------------------------------------------------------------
  export COMOUT_ROOT=${COMOUT_ROOT:-${DATA}/com}
  export COMOUT=${COMOUT:-${COMOUT_ROOT}/${NET}/${envir}/${model}.${PDY}}
  mkdir -m 755 -p $COMOUT
fi

# The following are used by $PROCESS_TIMETWINS when it is YES
# -----------------------------------------------------------
export COMINGFS=${COMINGFS:-${COMIN_ROOT:?}/${NET}/${envir}/${NET}.${PDY}}
export COMIN1=${COMIN1:-${COMIN_ROOT:?}/${NET}/${envir}/${model}.}

#########################################################
# SETUP GDAS POST-ANALYSIS PREPBUFR PROCESSING VARIABLES
#########################################################

#########################################################
# Specify variables specific to this execution of script
#########################################################
export PROCESS_REMOREST=${PROCESS_REMOREST:-YES}
export PROCESS_TIMETWINS=${PROCESS_TIMETWINS:-YES}

# $PROCESS_ALL_REPORT_COUNTS and $PROCESS_MASTER_SHIP_STNLST both default to
#  YES only in 18z runs and are otherwise hardwired to NO
# --------------------------------------------------------------------------
if [ $cyc != 18 ]; then  # only done in 18z GDAS runs
   export PROCESS_ALL_REPORT_COUNTS=NO
   export PROCESS_MASTER_SHIP_STNLST=NO
else
   export PROCESS_ALL_REPORT_COUNTS=${PROCESS_ALL_REPORT_COUNTS:-YES}
   export PROCESS_MASTER_SHIP_STNLST=${PROCESS_MASTER_SHIP_STNLST:-YES}
fi
if [ $PROCESS_ALL_REPORT_COUNTS == YES ]; then
  export REBUILD_MAINPAGE=${REBUILD_MAINPAGE:-NO}
  MM=`echo $PDY | cut -c5-6`
  MONS=(null JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC)
  MON=${MONS[10#$MM]}   # get month string from array MONS.
  YYYYMM=`echo $PDY  | cut -c1-6`
  if [[ "$RUN_ENVIR" == nco ]]; then
    export DATCOMIN=${COMIN_ROOT:?}/arch/${envir}
    export SATCOMIN=${COMIN_ROOT:?}/${NET}/${envir}
    export ARCHCOMIN=${COMIN_ROOT:?}/${NET}/${envir}
    export DATCOM1_IN=${COMIN_ROOT:?}/arch/${envir}
    export DATCOMOUT_dir=${COMROOT:?}/arch/${envir}/data_counts.${YYYYMM}
    export SATCOMOUT_dir=${COMROOT:?}/${NET}/${envir}/satcounts/${MON}
    export ARCHCOMOUT=${COMROOT:?}/${NET}/${envir}
    export DATCOM1_OUT=${COMROOT:?}/arch/${envir}
    mkdir -m 775 -p $DATCOMOUT_dir $SATCOMOUT_dir $ARCHCOMOUT $DATCOM1_OUT
  else
    export DATCOMIN=${DATCOMIN:-${COMIN_ROOT:?}/arch/${envir}}
    export SATCOMIN=${SATCOMIN:-${COMIN_ROOT:?}/${NET}/${envir}}
    export ARCHCOMIN=${ARCHCOMIN:-${COMIN_ROOT:?}/${NET}/${envir}}
    export DATCOM1_IN=${DATCOM1_IN:-${COMIN_ROOT:?}/arch/${envir}}
    export DATCOMOUT_dir=${DATCOMOUT_dir:-${COMOUT_ROOT:?}/arch/${envir}/data_counts.${YYYYMM}}
    export SATCOMOUT_dir=${SATCOMOUT_dir:-${COMOUT_ROOT:?}/${NET}/${envir}/satcounts/${MON}}
    export ARCHCOMOUT=${ARCHCOMOUT:-${COMOUT_ROOT:?}/${NET}/${envir}}
    export DATCOM1_OUT=${DATCOM1_OUT:-${COMOUT_ROOT:?}/arch/${envir}}
    mkdir -m 775 -p $DATCOMOUT_dir $SATCOMOUT_dir $ARCHCOMOUT $DATCOM1_OUT
  fi
fi 
if [ $PROCESS_MASTER_SHIP_STNLST == YES ]; then
  export DCOMROOT=${DCOMROOT:-/dcom}
  export SHPNAMDIR_DCOM=${SHPNAMDIR:-${DCOMROOT}/us007003/ndbc}
  if [[ "$RUN_ENVIR" == nco ]]; then
    export VOSarch_IN=${COMIN_ROOT:?}/arch/${envir}/VOS
    export VOSarch_OUT=${COMROOT:?}/arch/${envir}/VOS
    mkdir -m 755 $VOSarch_OUT
  else
    export VOSarch_IN=${VOSarch_IN:-${COMIN_ROOT:?}/arch/${envir}/VOS}
    export VOSarch_OUT=${VOSarch_OUT:-${COMOUT_ROOT:?}/arch/${envir}/VOS}
    mkdir -m 755 $VOSarch_OUT
  fi
fi 

env

#####################
# Execute the script
#####################
$SCRIPTSobsproc_prep_post/exprep_post.sh.ecf
eval err_${model}_prep_post=$?

echo "`hostname`  --  `date -u`" > $COMOUT/where_${cycle}_${RUN}_prep_post_ran

> $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_post_run
[ -n "$obsproc_global_ver" ]  &&  \
 echo "Current OBSPROC_GLOBAL version is $obsproc_global_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_post_run
[ -n "$obsproc_prep_post_ver" ]  &&  \
 echo "OBSPROC_PREP_POST version used by this job is \
$obsproc_prep_post_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_post_run
[ -n "$obsproc_shared_bufr_remorest_ver" ]  &&  \
 echo "OBSPROC_SHARED_BUFR_REMOREST version used by this job is \
$obsproc_shared_bufr_remorest_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_post_run

if [ "$KEEPDATA" != YES ]; then
   cd $DATAROOT
   rm -rf $DATA
fi
date -u

exit

set -xa
date -u

if [ -n "$obsproc_global_ver" ]; then
   set +x
   echo
   echo "Current OBSPROC_GLOBAL version is $obsproc_global_ver"
   echo
   set -x
fi
if [ -n "$obsproc_prep_ver" ]; then
   set +x
   echo
   echo "OBSPROC_PREP version used by this job is $obsproc_prep_ver"
   echo
   set -x
fi

###################################################################
# Set DEBUG LEVEL - modifies info in execution trace prompt string
###################################################################
export DEBUG_LEVEL=${DEBUG_LEVEL=1}
case $DEBUG_LEVEL in
  1) export PS4='+ ${SECONDS}s + ' ;;       # add seconds (this is typical case)
  0) export PS4='+ ';;                      # don't include seconds (useful if
                                            #  want to diff output from 2 runs)
  2) export PS4='+ ${SECONDS}s:L$LINENO + ';;         # add script line #
  3) export PS4='+ ${SECONDS}s:${0##*/}:L$LINENO + ';;# add script name & line #
  *) echo "Unrecognized DEBUG_LEVEL.  Stay with current PS4 setting";;
esac

########################################
# Check that required variables are set
########################################
set +x
echo
echo cyc is ${cyc:?"###FATAL ERROR \"cyc\" is not set"}
echo envir is ${envir:?"###FATAL ERROR \"envir\" is not set"}
echo job is ${job:?"###FATAL ERROR \"job\" is not set"}
echo
set -x

###########################
# Specify NET and RUN Name
###########################
export NET=${NET:-cdas}
export RUN=${RUN:-cdas}

##############################
# Specify cycle and time-mark
##############################
export cycle=t${cyc}z
export tmmark=tm00

###############################
# Create new working directory
###############################
host=$(hostname -s)
if [[ ${USER} == nwprod ]]; then
  DATAROOT=/tmpnwprd
else
  DATAROOT=${DATAROOT:-/stmpp1/${USER}}
  TMPDIR=$DATAROOT  # On WCOSS TMPDIR is reset to a temporary LSF
                    #  directory when jobs are submitted, set it
                    #  to $DATAROOT so its under the user's control
fi
export DATA=${DATA:-$DATAROOT/${job}.${host}.$$}
rm -rf $DATA
mkdir -p $DATA
cd $DATA

######################################
# Set job log file for postmsg output
######################################
if [[ ${USER} == nwprod ]]; then
  if [[ ${envir} == prod ]]; then
    jlogfile=/com/logs/jlogfiles/jlogfile.${job}.$$
  else
    jlogfile=/com/logs/${envir}/jlogfile
  fi
else
  jlogfile=${jlogfile:-${DATA}/jlogfile}
fi

######################################
# Determine Job Output Name on System
######################################
export pid=$$
export outid="LL$job"
[ $envir != prod ]  && export outid="LL${job}_${envir}"
export jobid="${outid}.o${pid}"
export pgmout="OUTPUT.${pid}"

################################################
# SENDCOM      - Copy files to /com directory
# SENDECF      - Flag Events on ECFLOW
# SENDDBN      - Alert output file to TOC
# SENDDBN_GB2  - Alert output GRIB2 file to TOC
################################################
if [[ ${USER} == nwprod ]]; then
  export SENDCOM=YES
  export SENDECF=YES
  if [[ ${envir} == prod ]]; then
    export SENDDBN=YES
    export SENDDBN_GB2=YES
  else
    export SENDDBN=NO
    export SENDDBN_GB2=NO
  fi
else  # developer
  export SENDCOM=${SENDCOM:-YES}
  export SENDECF=NO
  export SENDDBN=NO
  export SENDDBN_GB2=NO
fi

##########################
# Specify Execution Areas
##########################

# -------------------------------
# Paths for obsproc_network items
# -------------------------------
export HOMEobsproc_network=${HOMEobsproc_network:\
-/nw${envir}/obsproc_global.${obsproc_global_ver:?\
"###FATAL ERROR \"obsproc_global_ver\" is not set"}}

export SCRIPTSobsproc_global=${SCRIPTSobsproc_global:\
-$HOMEobsproc_network/scripts}

export FIXobsproc_global=${FIXobsproc_global:-$HOMEobsproc_network/fix}

# ----------------------------
# Paths for obsproc_prep items
# ----------------------------
export HOMEobsproc_prep=${HOMEobsproc_prep:\
-/nw${envir}/obsproc_prep.${obsproc_prep_ver:?\
"###FATAL ERROR \"obsproc_prep_ver\" is not set"}}

# directory path to data prep script executed in model script
# -----------------------------------------------------------
export ushscript_prep=${ushscript_prep:-$HOMEobsproc_prep/ush}

# ---------------------------------------------------------
# Paths for combined obsproc_network and obsproc_prep items
# ---------------------------------------------------------

export EXECPREP=${EXECPREP:-${HOMEobsproc_prep}/exec}
export FIXPREP=${FIXPREP:-${HOMEobsproc_prep}/fix}
export PARMPREP=${PARMPREP:-${HOMEobsproc_network}/parm}
export DICTPREP=${DICTPREP:-/nwprod/dictionaries}

export HOMESYND=${HOMESYND:-$HOMEobsproc_prep}
export EXECSYND=${EXECSYND:-${HOMESYND}/exec}
export FIXSYND=${FIXSYND:-${HOMESYND}/fix}
export PARMSYND=${PARMSYND:-${HOMEobsproc_network}/parm}

export HOMEUTIL=${HOMEUTIL:-/nwprod/util}
export EXECUTIL=${EXECUTIL:-${HOMEUTIL}/exec}

#######################
# Set up the UTILITIES
#######################
export utilscript=${utilscript:-/nwprod/util/ush}
export utilparm=${utilparm:-/nwprod/util/parm}
export utilexec=${utilexec:-/nwprod/util/exec}

################################################################
# Run setup to initialize working directory and utility scripts
################################################################
if [[ ${USER} == nwprod ]]; then
  sh $utilscript/setup.sh
else
  sh ${SETUP:-/nwprod/util/ush}/setup.sh
fi

##########################################
# Run setpdy and initialize PDY variables
##########################################
if [ -z "$PDY" ]; then
   if test "$cyc" = "06"
   then

# With a very late cutoff, it is possible for the 06Z cycle
# to move into the next day if production is running late -
# to ensure that the YYYYMMDD are correct, use the /com/date/t12z
# file for our PDY

      export cycle=t12z
      sh $utilscript/setpdy.sh
      . $DATA/PDY
      export cycle=t06z
      sh $utilscript/setpdy.sh
      . $DATA/PDY

   elif test "$cyc" = "18"
   then

# With a very late cutoff, it is possible for the 18Z cycle
# to move into the next day if production is running late -
# to ensure that the YYYYMMDD are correct, use the /com/date/t00z
# file to make PDY then backdate this PDY by 24-hours to get our PDY

      export cycle=t00z
      sh $utilscript/setpdy.sh
      . $DATA/PDY
      PDY=$PDYm1
      sh $utilscript/setpdy.sh
      . $DATA/PDY
      export cycle=t18z
      sh $utilscript/setpdy.sh
      . $DATA/PDY

   else

# At 00 and 12Z, there should never be a problem

      sh $utilscript/setpdy.sh
      . $DATA/PDY

   fi

else

# If PDY was previously specified (checkout only) fall through to here

   sh $utilscript/setpdy.sh
   . $DATA/PDY

fi

# Finally, backdate our PDY by 24-hours since model runs 1-day behind

PDY=$PDYm1
sh $utilscript/setpdy.sh
. $DATA/PDY

#########################
# Define COM directories
#########################
if [ "$LSB_UNIXGROUP_INT" = 'prod' ]; then
  export COMIN=/com/${NET}/${envir}/${RUN}.${PDY}
  export COMOUT=/com/${NET}/${envir}/${RUN}.${PDY}
  mkdir -m 775 -p $COMOUT
else
  export COMIN_ROOT=${COMIN_ROOT:-/com}
  export COMIN=${COMIN:-${COMIN_ROOT}/${NET}/${envir}/${RUN}.${PDY}}

# COMOUT_ROOT for developers defaults to unique $DATA/com directory as root to
#  prevent job from writing into a non-unique directory (e.g., /ptmpp1/$USER/com)
#  that might already have a dump status file in it from a previous checkout
#  run (this could mess up some logic downstream) -- since $DATA is not
#  necessarily known at time COMOUT_ROOT would have to be exported in parent
#  script we go with $DATA/com as default here
# -----------------------------------------------------------------------------
  export COMOUT_ROOT=${COMOUT_ROOT:-${DATA}/com}
  export COMOUT=${COMOUT:-${COMOUT_ROOT}/${NET}/${envir}/${RUN}.${PDY}}
  mkdir -m 755 -p $COMOUT
fi

#################################################
# SETUP CDAS PREPBUFR PREP2 PROCESSING VARIABLES
#################################################

#########################################################
# Specify variables specific to this execution of script
#########################################################

# VARIABLES THAT CONTROL PROCESSING OF INDIVIDUAL PROGRAMS
# --------------------------------------------------------

export PREPDATA=${PREPDATA:-NO}
                      # Execute programs PREPOBS_MPCOPYBUFR, PREPOBS_PREPDATA,
                      # PREPOBS_LISTHEADERS and PREPOBS_MONOPREPBUFR if YES
                      #   SHOULD ALWAYS BE SET TO "NO"
                      #   Instead, feed the file below into the Q.C. codes

export PREPBUFR_IN=${PREPBUFR_IN:-$COMIN/${RUN}.${cycle}.prepbufr_pre-qc}

export GETGUESS=${GETGUESS:-YES}
                      # Encode first guess (background) values interpolated to
                      # observation locations in the PREPBUFR file for use by
                      # the q.c. programs.  This guess is always from a global
                      # sigma guess file valid at the center PREPBUFR
                      # processing date/time.

export network_getges=${network_getges:-cdas}
                      # getges processes only CDAS files

#  -- These can individually be switched to NO without affecting the
#      success of other programs and the success of the complete job
#       (if job fails in one of these programs, set offending program
#       to NO and resubmit to "work-around" problem)

export SYNDATA=${SYNDATA:-NO}    # Execute program SYNDAT_SYNDATA   if YES
                                 #   SHOULD ALWAYS BE SET TO "NO"

export PREVENTS=${PREVENTS:-YES} # Execute program PREPOBS_PREVENTS if YES

export PREPACQC=${PREPACQC:-YES} # Execute PREPACQC script processing if YES
   export PROCESS_ACQC=${PROCESS_ACQC:-YES} # Execute program PREPOBS_PREPACQC
                                            #  if YES
   export PROCESS_ACPF=${PROCESS_ACPF:-NO} # Execute program PREPOBS_PREPACPF
                                            #  if YES
                                 #   SHOULD ALWAYS BE SET TO "NO" (profiles
                                 #    are not generated in CDAS)

export PROFCQC=${PROFCQC:-NO}    # Execute program PREPOBS_PROFCQC  if YES
                                 #   SHOULD ALWAYS BE SET TO "NO"

export CQCVAD=${CQCVAD:-NO}      # Execute program PREPOBS_CQCVAD   if YES
                                 #   SHOULD ALWAYS BE SET TO "NO"

export CQCBUFR=${CQCBUFR:-YES}   # Execute program PREPOBS_CQCBUFR  if YES

export CQCC=${CQCC:-$PARMPREP/prepobs_cqcbufr.${NET}.parm}
                                 # Must export CQCBUFR parm card path

export OIQCBUFR=${OIQCBUFR:-YES} # Execute program PREPOBS_OIQCBUFR if YES

export DO_QC=${DO_QC:-YES}
                      # IF NO, programs PREPOBS_PREVENTS, PREPOBS_PREPACQC,
                      # PREPOBS_PREPACPF, PREPOBS_PROFCQC, PREPOBS_CQCVAD,
                      # PREPOBS_CQCBUFR and PREPOBS_OIQCBUFR will NEVER execute
                      # regardless of switches above -

env

#####################
# Execute the script
#####################
$SCRIPTSobsproc_global/exglobal_makeprepbufr.sh.ecf
eval err_${RUN}_prep1=$?

COPY_TO_ARKV=${COPY_TO_ARKV:-YES}
if [ $COPY_TO_ARKV = YES ]; then
#
# Copy prep data to arkv directory
#

   ARKPDY=`echo $PDY | cut -c1-6`
   [ -s cqc_events ] && cp cqc_events \
    /com/arkv/${envir}/cdas.${ARKPDY}/cqc_events.${PDY}${cyc}
   [ -s cqc_stncnt ] && cp cqc_stncnt \
    /com/arkv/${envir}/cdas.${ARKPDY}/cqc_stncnt.${PDY}${cyc}
   [ -s cqc_stnlst ] && cp cqc_stnlst \
    /com/arkv/${envir}/cdas.${ARKPDY}/cqc_stnlst.${PDY}${cyc}
   [ -s cqc_wndpbm ] && cp cqc_wndpbm \
    /com/arkv/${envir}/cdas.${ARKPDY}/cqc_wndpbm.${PDY}${cyc}
   [ -s tosslist ] && cp tosslist \
    /com/arkv/${envir}/cdas.${ARKPDY}/tosscat${PDY}${cyc}
   #cp $LOADL_STEP_OUT /com/arkv/${envir}/cdas.${ARKPDY}/prep2${PDY}${cyc}.out
   cp $LSB_OUTPUTFILE /com/arkv/${envir}/cdas.${ARKPDY}/prep2${PDY}${cyc}.out
fi

echo "`hostname`  --  `date -u`" > $COMOUT/where_${cycle}_${RUN}_prep_ran

> $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run
[ -n "$obsproc_global_ver" ]  &&  \
 echo "Current OBSPROC_GLOBAL version is $obsproc_global_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run
[ -n "$obsproc_prep_ver" ]  &&  \
 echo "OBSPROC_PREP version used by this job is $obsproc_prep_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run

if [ "${CLEANUP:-YES}" = YES ]; then
   cd $DATAROOT
   rm -rf $DATA
fi
date -u

exit
